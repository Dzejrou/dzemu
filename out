INPUT:
.include "print.a65"
.include "math.a65"

.byte loop_count $05
.byte hello $48 $45 $4C $4C $4F $00
.byte hallo $48 $41 $4C $4C $4F $00
.byte start_addr $20

.macro test_arg _arg1 _arg2
  $test _arg1
  $test _arg2
  $test _arg1

.macro test _arg
  PRT _arg

start:
$test_arg hallo hello

INPUT:
.INCLUDE "PRINT.A65"
.INCLUDE "MATH.A65"

.BYTE LOOP_COUNT $05
.BYTE HELLO $48 $45 $4C $4C $4F $00
.BYTE HALLO $48 $41 $4C $4C $4F $00
.BYTE START_ADDR $20



START:
$TEST HALLO
$TEST HELLO
$TEST HALLO

INPUT:
.INCLUDE "PRINT.A65"
.INCLUDE "MATH.A65"

.BYTE LOOP_COUNT $05
.BYTE HELLO $48 $45 $4C $4C $4F $00
.BYTE HALLO $48 $41 $4C $4C $4F $00
.BYTE START_ADDR $20



START:
PRT HALLO
PRT HELLO
PRT HALLO

INPUT:
; Prints the string to stdout.
print:
LDX loop_count

print_loop:
PRT hello
DEX
BNE print_loop
RTS

INPUT:
; Multiplies __mul1 and __mul2 and stores
; the product in the accumulator.
.byte __mul1 $00
.byte __mul2 $00

math_mul:
LDA #$00
BEQ __mul_start

__mul_add:
CLC
ADC __mul1

__mul_loop:
ASL __mul1

__mul_start:
LSR __mul2
BCS __mul_add
BNE __mul_loop

RTS

